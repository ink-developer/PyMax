import asyncio
from pymax import MaxClient, Message, Chat, User
from pymax.types import VideoAttach, PhotoAttach, FileAttach
import os
from dotenv import load_dotenv
from aiogram import Bot, Dispatcher, types
import aiohttp
from io import BytesIO

"""
–ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏:

pip install maxapi-python==1.1.13 aiogram==3.22.0 python-dotenv

"""




"""
–í .env –Ω—É–∂–Ω–æ —É–∫–∞–∑–∞—Ç—å:

PHONE = "+7123456789"  # –¢–≤–æ–π –Ω–æ–º–µ—Ä –¥–ª—è Max
BOT_TOKEN = "23456789:AAH0cJ3SNzZ2zzD0uF8HOqmxtKpwsKwggM"  # –¢–≤–æ–π —Ç–æ–∫–µ–Ω Telegram-–±–æ—Ç–∞

"""

chats = { # –í —Ñ–æ—Ä–º–∞—Ç–µ –∞–π–¥–∏ —á–∞—Ç–∞ –≤ Max: –∞–π–¥–∏ —á–∞—Ç–∞ –≤ Telegram
    -68690734055662: -1003177746657,
}


# –°–æ–∑–¥–∞—ë–º –∑–µ—Ä–∫–∞–ª—å–Ω—ã–π –º–∞—Å—Å–∏–≤ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∏–∑ Telegram –≤ Max
chats_telegram = {value: key for key, value in chats.items()}


# –ó–∞–≥—Ä—É–∂–∞–µ–º .env
load_dotenv(override=True)


# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ .env
PHONE = os.getenv("PHONE") # –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ Max
telegram_bot_TOKEN = os.getenv("BOT_TOKEN") # –¢–æ–∫–µ–Ω TG-–±–æ—Ç–∞


client = MaxClient(phone=PHONE, work_dir="cache")


# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è TG-–±–æ—Ç–∞
telegram_bot = Bot(token=telegram_bot_TOKEN)
dp = Dispatcher()



# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Ö–æ–¥—è—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π MAX
@client.on_message()
async def handle_message(message: Message) -> None:

    tg_id = chats[message.chat_id]

    sender = await client.get_user(user_id=message.sender)

    if message.attaches:
        for attach in message.attaches:

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –≤–∏–¥–µ–æ
            if isinstance(attach, VideoAttach):
                async with aiohttp.ClientSession() as session:
                    try:
                        # –ü–æ–ª—É—á–∞–µ–º –≤–∏–¥–µ–æ –ø–æ –∞–π–¥–∏
                        video = await client.get_video_by_id(
                            chat_id=message.chat_id,
                            message_id=message.id,
                            video_id=attach.video_id
                            )


                        # –ó–∞–≥—Ä—É–∂–∞–µ–º –≤–∏–¥–µ–æ –ø–æ URL
                        async with session.get(video.url) as response:
                            response.raise_for_status()  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –æ—à–∏–±–∫–∏ HTTP
                            video_bytes = BytesIO(await response.read())
                            video_bytes.name = response.headers.get("X-File-Name")

                        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤–∏–¥–µ–æ —á–µ—Ä–µ–∑ —Ç–µ–ª–µ–≥—Ä–∞–º –±–æ—Ç–∞
                        await telegram_bot.send_video(
                            chat_id=tg_id,
                            caption=f"{sender.names[0].name}: {message.text}",
                            video=types.BufferedInputFile(video_bytes.getvalue(), filename=video_bytes.name)
                        )

                        # –û—á–∏—â–∞–µ–º –ø–∞–º—è—Ç—å
                        video_bytes.close()

                    except aiohttp.ClientError as e:
                        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –≤–∏–¥–µ–æ: {e}")
                    except Exception as e:
                        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤–∏–¥–µ–æ: {e}")

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
            elif isinstance(attach, PhotoAttach):
                async with aiohttp.ClientSession() as session:
                    try:
                        # –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–æ URL
                        async with session.get(attach.base_url) as response:
                            response.raise_for_status()  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –æ—à–∏–±–∫–∏ HTTP
                            photo_bytes = BytesIO(await response.read())
                            photo_bytes.name = response.headers.get("X-File-Name")

                        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ —á–µ—Ä–µ–∑ —Ç–µ–ª–µ–≥—Ä–∞–º –±–æ—Ç–∞
                        await telegram_bot.send_photo(
                            chat_id=tg_id,
                            caption=f"{sender.names[0].name}: {message.text}",
                            photo=types.BufferedInputFile(photo_bytes.getvalue(), filename=photo_bytes.name)
                        )

                        # –û—á–∏—â–∞–µ–º –ø–∞–º—è—Ç—å
                        photo_bytes.close()

                    except aiohttp.ClientError as e:
                        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}")
                    except Exception as e:
                        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–æ—Ç–æ: {e}")
                        
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Ñ–∞–π–ª
            elif isinstance(attach, FileAttach):
                async with aiohttp.ClientSession() as session:
                    try:
                        # –ü–æ–ª—É—á–∞–µ–º —Ñ–∞–π–ª –ø–æ –∞–π–¥–∏
                        file = await client.get_file_by_id(
                            chat_id=message.chat_id,
                            message_id=message.id,
                            file_id=attach.file_id
                            )

                        # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ–∞–π–ª –ø–æ URL
                        async with session.get(file.url) as response:
                            response.raise_for_status()  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –æ—à–∏–±–∫–∏ HTTP
                            file_bytes = BytesIO(await response.read())
                            file_bytes.name = response.headers.get("X-File-Name")

                        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª —á–µ—Ä–µ–∑ —Ç–µ–ª–µ–≥—Ä–∞–º –±–æ—Ç–∞
                        await telegram_bot.send_document(
                            chat_id=tg_id,
                            caption=f"{sender.names[0].name}: {message.text}",
                            document=types.BufferedInputFile(file_bytes.getvalue(), filename=file_bytes.name)
                        )

                        # –û—á–∏—â–∞–µ–º –ø–∞–º—è—Ç—å
                        file_bytes.close()

                    except aiohttp.ClientError as e:
                        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–∞–π–ª–∞: {e}")
                    except Exception as e:
                        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–∞–π–ª–∞: {e}")
    else:
        await telegram_bot.send_message(
            chat_id=tg_id,
            text=f"{sender.names[0].name}: {message.text}"
        )


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–ø—É—Å–∫–∞ –∫–ª–∏–µ–Ω—Ç–∞, —Ñ—É–Ω–∫—Ü–∏—è –≤—ã–≤–æ–¥–∏—Ç –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ —á–∞—Ç–∞ "–ò–∑–±—Ä–∞–Ω–Ω–æ–µ"
@client.on_start
async def handle_start() -> None:
    print("–ö–ª–∏–µ–Ω—Ç –∑–∞–ø—É—â–µ–Ω")
    
    # –ü–æ–ª—É—á–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
    history = await client.fetch_history(chat_id=0)
    if history:
        for message in history:
            user = await client.get_user(message.sender)
            if user:
                print(f"{user.names[0].name}: {message.text}")


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π Telegram
@dp.message()
async def handle_message(message: types.Message, bot: Bot) -> None:
    max_id = chats_telegram[message.chat.id]
    await client.send_message(chat_id=max_id, text=message.text, notify=True)


# –†–∞–Ω–Ω–µ—Ä –±–æ—Ç–æ–≤
async def main() -> None:
    # TG-–±–æ—Ç –≤ —Ñ–æ–Ω–µ
    telegram_bot_task = asyncio.create_task(dp.start_polling(telegram_bot))

    try:
        while True: # –ù–µ —Å–ø—Ä–∞—à–∏–≤–∞–π—Ç–µ üòÉ
            await client.start()

    finally:
        await client.close()
        telegram_bot_task.cancel()


if __name__ == "__main__":
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        print("–ü—Ä–æ–≥—Ä–∞–º–º–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º.")